import config
import helper
import os
import re

CSS_NAME_PATTERN = r'\.[A-Z_]+[\s{:,\.\[>]'
CSS_NAME_GROUPS_PATTERN = r'(\.)([A-Z_]+)([\s{:,\.\[>])'

JS_CODE_TEMPLATE = """
// Auto-generated Code. Do not edit this file.
goog.provide('tpl.fu.CSSNames');

/**
 * @type {Object}
 */
tpl.fu.CSSNames = {};

// Define css names below.
%s
"""

JS_DEFINE_NEW_CSS_NAME_CODE_TEMPLATE = """
/** @type {string} %s */
var %s = '%s';
/** @type {string} */
tpl.fu.CSSNames.%s = COMPILED ? '%s' : '%s';
"""

JS_DEFINE_USED_CSS_NAME_CODE_TEMPLATE = """
// %s
// var %s = '%s';
"""
CSS_NEW_NAME_TEMPLATE = 'H%s'

CSS_NAMES = {}

CSS_NAME_COUNT = 0

def rename_css_name(matched_str, js_vars) :
  groups = re.findall(CSS_NAME_GROUPS_PATTERN, matched_str)
  old_name = groups[0][1] # FOO_BAR
  if old_name in CSS_NAMES :
    new_name = CSS_NAMES.get(old_name)
    values = (matched_str, old_name, new_name)
    js_vars.append(JS_DEFINE_USED_CSS_NAME_CODE_TEMPLATE % values)
  else :
    global CSS_NAME_COUNT
    new_name = CSS_NEW_NAME_TEMPLATE % hex(CSS_NAME_COUNT)[2 :]
    new_name = new_name.upper()
    CSS_NAMES[old_name] = new_name
    CSS_NAME_COUNT += 1
    values = (matched_str, old_name, new_name, old_name, new_name, old_name)
    js_vars.append(JS_DEFINE_NEW_CSS_NAME_CODE_TEMPLATE % values)

  result = '%s%s%s' % (groups[0][0], new_name, groups[0][2])
  return result


def build_css() :
  all_css_text = []

  css_files = None

  if helper.should_compile() :
    css_files = config.CSS_FILES
  else :
    css_files = config.DEMO_CSS_FILES

  for css_file in config.CSS_FILES :
    all_css_text.append(helper.get_file_text(css_file))
  all_css_text = ''.join(all_css_text)

  output_raw_path = config.BUILD_INFO_DIR + '/.raw.all_css_text.css'
  output_min_path = config.BUILD_INFO_DIR + '/.min.all_css_text.css'
  helper.write_text(output_raw_path, all_css_text)

  cmd = 'java -jar %s %s > %s' % (
    config.CSS_COMPRESSOR_PATH,
    output_raw_path,
    output_min_path)

  os.system(cmd)
  min_css_text = helper.get_file_text(output_min_path)

  js_vars = []
  css_names = re.findall(CSS_NAME_PATTERN, min_css_text)
  old_new_css_names = [(cn, rename_css_name(cn, js_vars))for cn in css_names]

  if helper.should_compile(config.DEFAULT_COMPILED) :
    bin_css_text = min_css_text
    for pair in old_new_css_names :
      bin_css_text = bin_css_text.replace(pair[0], pair[1])
    helper.write_text(config.CSS_BIN_DIR + '/all.css', bin_css_text)
  else :
    print 'Skip generate compiled CSS.'

  js_code = JS_CODE_TEMPLATE % ''.join(js_vars)
  helper.write_text(config.JS_CSS_NAMES_PATH, js_code.strip())


def build_images() :
  os.system('mkdir -p %s' % config.IMAGE_BIN_DIR)
  os.system('rm %s/*' % config.IMAGE_BIN_DIR)

  cmd = []
  for img_path in config.IMG_FILES :
    file_name = helper.get_file_name(img_path)
    cmd.append('cp %s %s/%s;' % (img_path, config.IMAGE_BIN_DIR, file_name))

  cmd = '\n'.join(cmd)
  print cmd
  os.system(cmd)


if __name__ == '__main__' :
  print '-' * 80
  print 'gen_css'
  build_css()
  build_images()
